networks:
  keycloak-network:
    external: true
  traefik-network:
    external: true

volumes:
  keycloak-postgres:
  keycloak-postgres-backup:
  keycloak-database-backups:
  traefik-certificates:

services:
  postgres:
    image: postgres:latest
    volumes:
      - keycloak-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: mykeycloakdb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: admin
    networks:
      - keycloak-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "mykeycloakdb", "-U", "myuser" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  keycloak:
    image: jboss/keycloak:26.0.8
    command: start
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: mykeycloakdb
      KC_DB_USERNAME: myuser
      KC_DB_PASSWORD: admin
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: 'true'
      KC_HOSTNAME: keycloak.pokcha.ru
      KC_HTTP_ENABLED: 'true'
      KC_PROXY_HEADERS: 'xforwarded'
      PROXY_ADDRESS_FORWARDING: 'true'
    networks:
      - keycloak-network
      - traefik-network
    healthcheck:
      test:
        - "CMD-SHELL"
        - |
          exec 3<>/dev/tcp/localhost/9000 &&
          echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n' >&3 &&
          cat <&3 | tee /tmp/healthcheck.log | grep -q '200 OK'
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.pokcha.ru`)"
      - "traefik.http.routers.keycloak.service=keycloak"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.services.keycloak.loadbalancer.passhostheader=true"
      - "traefik.http.routers.keycloak.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  traefik:
    image: traefik:v2.5
    command:
      - "--log.level=INFO"
      - "--api.dashboard=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entrypoints.ping.address=:8082"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=stamkos61@mail.ru"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checknewversion=true"
      - "--global.sendanonymoususage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
        # Enable Traefik for this container.
        - "traefik.enable=true"
        # A router to expose the Traefik dashboard.
        - "traefik.http.routers.dashboard.rule=Host(`traefik.pokcha.ru`)"
        - "traefik.http.routers.dashboard.entrypoints=websecure"
        - "traefik.http.routers.dashboard.tls=true"
        - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
        - "traefik.http.routers.dashboard.service=api@internal"
        # Basic Authentication for the Traefik dashboard.
        # Note that you need to set TRAEFIK_BASIC_AUTH environment variable with a base64 encoded username and password.
        # For example, using htpasswd utility.
        # Example command to generate a user/password combination in base64 format (replace with your values):
        # echo $(htpasswd -nb admin admin | sed -e s'/\:.*//')":"$(htpasswd -nb admin admin | sed -e s'/^.*\://')
        # And then set it as the TRAEFIK_BASIC_AUTH variable.
        # For now, it is commented out.
        #- "traefik.http.routers.dashboard.middlewares=authtraefik" 
        #- "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
        # Specify the internal server port to the dashboard service.
        - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
        # Pass the original Host header to the backend.
        - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
        # HTTP -> HTTPS redirect for all hosts.
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https" 
    restart: unless-stopped

  backups:
    image: postgres:latest  # Укажите нужный тег образа
    command: >-
      sh -c 'sleep 10 &&  # Время ожидания перед началом бэкапа
      while true; do
        pg_dump -h postgres -p 5432 -d mykeycloakdb -U myuser | gzip > /var/lib/postgresql/data/mybackup-$(date "+%Y-%m-%d_%H-%M").gz &&
        find /var/lib/postgresql/data -type f -mtime +7 | xargs rm -f &&  # Удаление старых бэкапов
        sleep 3600; done'  # Интервал между бэкапами
    volumes:
      - keycloak-postgres-backup:/var/lib/postgresql/data
      - keycloak-database-backups:/var/lib/postgresql/data  # Путь для хранения бэкапов
    environment:
      KEYCLOAK_DB_NAME: mykeycloakdb
      KEYCLOAK_DB_USER: myuser
      PGPASSWORD: admin
      KEYCLOAK_BACKUP_INIT_SLEEP: 10
      KEYCLOAK_BACKUP_INTERVAL: 3600
      KEYCLOAK_POSTGRES_BACKUP_PRUNE_DAYS: 7
      KEYCLOAK_POSTGRES_BACKUPS_PATH: /var/lib/postgresql/data
      KEYCLOAK_POSTGRES_BACKUP_NAME: mybackup
    networks:
      - keycloak-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
